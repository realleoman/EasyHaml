namespace :set_enabled_and_protected do
    desc "Enables existing library types"
    task :set_enabled_library_types => :environment do
      @library_type = LibraryType.find(:first, :conditions => ["name = ?", "[Mechanical Drawings]"])
      if !@library_type.nil? then
        @library_type.is_enabled = 1
        @library_type.save
      else
        LibraryType.create :name => "[Mechanical Drawings]", :is_enabled => true, :is_protected => 1
      end
      @library_type = LibraryType.find(:first, :conditions => ["name = ?", "[Nutritional Tables]"])
      if !@library_type.nil? then
        @library_type.is_enabled = 1
        @library_type.save
      else
        LibraryType.create :name => "[Nutritional Tables]", :is_enabled => true, :is_protected => 1
      end
    end
    desc "Protects existing library types"
    task :set_protected_library_types => :environment do
      @library_type = LibraryType.find(:first, :conditions => ["name = ?", "[Mechanical Drawings]"])
      if !@library_type.nil? then
        @library_type.is_protected = 1
        @library_type.save
      else
        LibraryType.create :name => "[Mechanical Drawings]", :is_enabled => true, :is_protected => 1
      end
      @library_type = LibraryType.find(:first, :conditions => ["name = ?", "[Nutritional Tables]"])
      if !@library_type.nil? then
        @library_type.is_protected = 1
        @library_type.save
      else
        LibraryType.create :name => "[Nutritional Tables]", :is_enabled => true, :is_protected => 1
      end
    end
    
    desc "Enables existing markup stati"
    task :set_enabled_markup_stati => :environment do
      @markup_stati = MarkupStatus.find(:all)
      @markup_stati.each do |markup_status|
        markup_status.is_enabled = 1
        markup_status.save
      end
    end  
  
    desc "Enables existing metadata combos"
    task :set_enabled_metadata_combos => :environment do
      @metadata_combos = MetadataCombo.find(:all)
      @metadata_combos.each do |metadata_combo|
        metadata_combo.is_enabled = 1
        metadata_combo.save
      end
    end
  
    desc "Enables existing metadata definitions"
    task :set_enabled_metadata_definitions => :environment do
      @metadata_definitions = MetadataDefinition.find(:all)
      @metadata_definitions.each do |metadata_definition|
        metadata_definition.is_enabled = 1
        metadata_definition.save
      end
    end
  
    desc "Enables existing person users"
    task :set_enabled_person_users => :environment do
      @person_users = PersonUser.find(:all)
      @person_users.each do |person_user|
        person_user.is_enabled = 1
        person_user.save
        @user = person_user.users.first
        if !@user.nil? then
          @user.is_enabled = 1
          @user.save
        end
      end
    end
    
    desc "Protects existing person users"
    task :set_protected_person_users => :environment do
      @person_users = PersonUser.find(:all)
      @person_users.each do |person_user|
        @user = person_user.users.first
        if !@user.nil? then
          @user.is_protected = 1
          @user.save
        end
      end
    end
    
    desc "Enables existing roles"
    task :set_enabled_roles => :environment do
      @roles = Role.find(:all)
      @roles.each do |role|
        role.is_enabled = 1
        role.save
      end
    end      

    desc "All enable & protected task."
    task :all_tasks => [:set_enabled_library_types, :set_protected_library_types, :set_enabled_markup_stati, 
                      :set_enabled_metadata_combos, :set_enabled_metadata_definitions, :set_enabled_person_users, 
                      :set_protected_person_users, :set_enabled_roles]
                        
end